C++ 模板编程 
STL 标准模板库
C标准库
1.模板
	是一种通用编程技术。可以写出更加通用的程序代码。
	是C++提供的泛型编程技术。
	Java,C#...很多语言都支持泛型编程

	模板是C++提供的一种泛型编程技术,是类型参数化的一种技术。C++中，模板是以生成所需代码的方式达到通用编程要求的。所以模板其实是一个代码生成器。

2.类模板
	可以生成类的模板。
	类模板是不能构造对象的,只有类才能构造对象。
	类模板==>生成类==>构造对象

	类模板生成类的过程叫模板的实例化。
	类生成对象的过程叫类的实例化。
	
	类模板不能将声明和实现分开。也就是说,一个类的模板不会有.h文件和.cpp文件两个来表示,它只会存在于一个文件中。

3.模板参数
	3.1 类型参数
		可以没有,可以有一个,也可以有多个
	3.2 普通参数
		模板参数可以是普通参数,普通参数被当做常量值来使用,在模板中不能修改其值,模板实例化时传给此参数的值也只能是常量。
	3.3 模板参数也可以有默认值,非常类似于函数的默认值,如只能从右向左给。
		不管是类型参数还是普通参数,都可以给默认值。
4.继承
	继承是类与类之间的关系，模板之间不能直接继承,必需将模板实例化成类之后才可以进行继承。

5.函数模板
	5.1 用来生成函数的模板。
	5.2 调用函数模板:
		函数模板==>生成函数(编译器)==>调用此函数
	5.3 函数模板的模板参数
		模板参数可以是类型参数,也可以是普通参数
		但不能给默认值。
		普通模板参数当做常量使用,所以函数中不可改变,传参时只能传常量。

6.函数模板参数的类型推断
	6.1 C++函数模板在调用时,模板参数的类型是可以由编译器自动推断出来的。
	6.2 函数的类型推断是通过传入函数的的实参类型推断出函数形参使用的泛型是什么类型。
	6.3 有时候,类型推断会失效
		
7.特别化(专门化,特化)
	7.1 类模板的特化
		

	7.2 函数模板的特化












	








	
	
	
	



